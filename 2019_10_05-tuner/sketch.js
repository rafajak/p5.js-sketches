let dcgan_lowres;
let image_cache = [];
let level;
let display_text = true;

function preload() {

	dcgan_lowres = ml5.DCGAN('model/face/manifest.json');
	sound = loadSound('assets/song.mp3');
}


function setup() {
	cnv = createCanvas(450, 450);
	amplitude = new p5.Amplitude();
	background(10) // start / stop the sound when canvas is clicked
	cnv.mouseClicked(function () {
		if (sound.isPlaying()) {
			sound.pause();
			display_text = true;
		} else {
			if (image_cache.length > 0) {
				display_text = false;
				sound.play();
			}
		}
	});
}


function cacheImg(err, result) {
	if (err) {
		console.log(err);
		return;
	}
	image_cache.push(result);
	if (image_cache.length > 400) {
		image_cache.splice(0, 200)
	}
}


function draw() {
	if (display_text == true) {
		fill(255);
		stroke(0);
		strokeWeight(3);
		textSize(17);

		if (image_cache.length < 10) {
			text("Wait for the Generative Adversarial Network to load...", width / 2 - 200, height / 2)
		} else {
			background(10)
			textSize(20);

			text("	CLICK ANYWHERE TO START", width / 2 - 140, height / 2)
			strokeWeight(1);

			textSize(12);
			text("[contains scenes with flashing lights]", width / 2 - 85, height / 2 + 18)

			text("The strange images you'll see will be generated by your own computer.", width / 2 - 180, height / 2 + 20 * 4)
			text("It will use a compact generative neural network model (DCGAN).", width / 2 - 180, height / 2 + 20 * 5)
			text("The model was trained to draw pictures of human faces.", width / 2 - 180, height / 2 + 20 * 6)
			text("The results are horrible, and so is the accompanying music I made.", width / 2 - 180, height / 2 + 20 * 7)
			text("(I hope you like it as much as I do)", width / 2 - 180, height / 2 + 20 * 9)
			textSize(12);

			text("Raf Jakubanis", width - 90, height - 10)

		}

	}
	var level = amplitude.getLevel();
	// console.log(image_cache.length)
	console.log(level)
	dcgan_lowres.generate(cacheImg)



	if (image_cache.length > 0) {}
	if (level > 0.31) {
		{
			for (i = 0; i < 3; i++) {
				for (j = 0; j < 3; j++) {
					image(image_cache[int(random(image_cache.length))].image, j * 150, j * 150, 150, 150);
					image(image_cache[int(random(image_cache.length))].image, j * 150, i * 150, 150, 150);
					image(image_cache[int(random(image_cache.length))].image, i * 150, j * 150, 150, 150);
					image(image_cache[int(random(image_cache.length))].image, i * 150, i * 150, 150, 150);


				}
			}

		}
	}
	if (level > 0.25) {
		image(image_cache[int(random(image_cache.length))].image, 1 * 150, 1 * 150, 150, 150);

	}
}